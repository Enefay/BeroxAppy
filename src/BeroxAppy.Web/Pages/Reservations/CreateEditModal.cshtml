@page
@using Microsoft.AspNetCore.Mvc.Localization
@using BeroxAppy.Localization
@using BeroxAppy.Web.Pages.Reservations
@using Volo.Abp.AspNetCore.Mvc.UI.Bootstrap.TagHelpers.Modal
@model CreateEditModalModel
@inject IHtmlLocalizer<BeroxAppyResource> L
@{
    Layout = null;
}


<script>
    $(function () {
        let serviceRowIndex = 0;
        let customerSearchTimeout;
        let selectedCustomer = null;

        // ABP Modal Manager - Müşteri ekleme modalı
        var customerCreateModal = new abp.ModalManager({
            viewUrl: abp.appPath + 'Customers/CreateEditModal',
            modalClass: 'CustomerCreateEditModal'
        });

        // Modal açıldığında çalışacak fonksiyon
        initializeModal();

        function initializeModal() {
            // İlk hizmet satırını ekle (eğer yoksa)
            if ($('#servicesContainer .service-row').length === 0) {
                addServiceRow();
            }

            // Event'leri bağla
            bindModalEvents();

            // Müşteri autocomplete'i başlat
            initializeCustomerAutocomplete();

            // ABP Modal event'lerini bağla
            bindCustomerModalEvents();

            // Form submit işlemini override et
            overrideFormSubmit();

            // İlk hesaplama
            setTimeout(calculateTotalPrice, 100);
        }

        function bindCustomerModalEvents() {

            customerCreateModal.onResult((_, data) => {
                if (data && data.statusText == 'success') {
                    abp.notify.success('Müşteri başarıyla eklendi!');
                    $('#customerSearch').val(data.responseText.fullName);
                    $('#selectedCustomerId').val(data.responseText.id);
                }
            });

        }

        // ABP Modal ile yeni müşteri ekleme modalını aç
        function openAddCustomerModal(customerName = '') {
            // Modal'ı aç
            customerCreateModal.open({
                customerName: customerName // Modal'a parametre gönder
            });
        }

        function bindModalEvents() {
            // Hizmet ekle - event delegation kullan
            $(document).off('click', '#addServiceBtn').on('click', '#addServiceBtn', function () {
                addServiceRow();
            });

            // Tarih değiştiğinde müsait saatleri güncelle
            $(document).off('change', '#reservationDate').on('change', '#reservationDate', function () {
                updateAvailableSlots();
            });

            // Fiyat hesaplama - İndirim ve ekstra ücret değişikliklerinde
            $(document).off('input change', '#discountAmount, #extraAmount').on('input change', '#discountAmount, #extraAmount', function() {
                calculateTotalPrice();
            });
        }

        // Form submit işlemini override et
        function overrideFormSubmit() {
            $('#reservationForm').off('submit').on('submit', function(e) {
                e.preventDefault();
                e.stopPropagation();

                submitFormWithValidation();
                return false;
            });

            // Modal'daki Save butonunu da override et
            $('.abp-modal-footer .btn-primary').off('click').on('click', function(e) {
                e.preventDefault();
                e.stopPropagation();

                submitFormWithValidation();
                return false;
            });
        }

        // Form gönderimi ve validation kontrolü
        function submitFormWithValidation() {
            // Loading state
            const saveBtn = $('.abp-modal-footer .btn-primary');
            const originalText = saveBtn.text();
            saveBtn.prop('disabled', true).text('Kaydediliyor...');

            // Önceki hata mesajlarını temizle
            $('.text-danger').text('');
            $('.is-invalid').removeClass('is-invalid');
            $('.validation-summary').remove();

            // Form data'sını topla
            const formData = $('#reservationForm').serialize();

            $.ajax({
                url: $('#reservationForm').attr('action'),
                type: 'POST',
                data: formData,
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(response) {
                    if (response.success) {
                        abp.event.trigger('app.reservation.saved', response);
                        createEditModal.close();
                        return;
                    } else {
                        // Validation hataları var - Modal'ı açık tut
                        handleValidationErrors(response);
                    }
                },
                error: function(xhr) {
                    // Server hatası
                    console.error('Server error:', xhr);
                    abp.notify.error('Bir hata oluştu. Lütfen tekrar deneyin.');
                },
                complete: function() {
                    // Loading state'i kaldır
                    saveBtn.prop('disabled', false).text(originalText);
                }
            });
        }

        // Validation hatalarını işle
        function handleValidationErrors(response) {
            if (response.errors) {
                // Field level validation errors
                Object.keys(response.errors).forEach(function(fieldName) {
                    const errors = response.errors[fieldName];
                    if (errors && errors.length > 0) {
                        // Field'ı bul ve hata mesajını göster
                        const field = $(`[name="${fieldName}"]`);
                        if (field.length > 0) {
                            field.addClass('is-invalid');

                            // Hata mesajını göster
                            const errorSpan = field.closest('.form-group, .col-md-4, .col-md-8, .col-12').find('.text-danger');
                            if (errorSpan.length > 0) {
                                errorSpan.text(errors[0]);
                            }
                        }
                    }
                });
            }

            // Genel hata mesajı
            if (response.message) {
                const errorHtml = `<div class="validation-summary alert alert-danger">${response.message}</div>`;
                $('.abp-modal-body').prepend(errorHtml);
            }

            // Modal'ı en üste kaydır
            $('.abp-modal-body').scrollTop(0);

            abp.notify.error(response.message || 'Lütfen form hatalarını düzeltin.');
        }

        // Müşteri autocomplete fonksiyonu
        function initializeCustomerAutocomplete() {
            const searchInput = $('#customerSearch');
            const dropdown = $('#customerDropdown');
            const hiddenCustomerId = $('#selectedCustomerId');

            // Input focus olduğunda dropdown'u göster
            searchInput.on('focus', function() {
                if ($(this).val().length >= 1) {
                    searchCustomers($(this).val());
                }
            });

            // Input'a yazı yazıldığında arama yap
            searchInput.on('input', function() {
                const query = $(this).val().trim();

                // Seçili müşteriyi temizle
                if (selectedCustomer && selectedCustomer.fullName !== query) {
                    selectedCustomer = null;
                    hiddenCustomerId.val('');
                }

                if (query.length >= 1) {
                    // Debounce - 300ms bekle
                    clearTimeout(customerSearchTimeout);
                    customerSearchTimeout = setTimeout(() => {
                        searchCustomers(query);
                    }, 300);
                } else {
                    dropdown.hide();
                }
            });

            // Input'tan çıkıldığında dropdown'u gizle (kısa gecikme ile)
            searchInput.on('blur', function() {
                setTimeout(() => {
                    dropdown.hide();
                }, 200);
            });

            // Dropdown item'lara tıklama
            $(document).off('click', '.customer-dropdown-item').on('click', '.customer-dropdown-item', function(e) {
                e.preventDefault();
                const customerId = $(this).data('customer-id');
                const customerName = $(this).data('customer-name');

                if (customerId === 'new') {
                    // ABP Modal ile yeni müşteri ekleme modalını aç
                    const searchQuery = $('#customerSearch').val().trim();
                    console.log("Açılacak modal için query:", searchQuery);
                    openAddCustomerModal(searchQuery);
                    dropdown.hide();
                    return;
                }

                // Müşteriyi seç
                selectedCustomer = {
                    id: customerId,
                    fullName: customerName
                };

                searchInput.val(customerName);
                hiddenCustomerId.val(customerId);
                dropdown.hide();
            });
        }

        // Müşteri arama AJAX fonksiyonu
        function searchCustomers(query) {
            const dropdown = $('#customerDropdown');

            // Loading göster
            dropdown.html('<div class="dropdown-item disabled">Aranıyor...</div>').show();

            $.ajax({
                url: '/Reservations/CreateEditModal?handler=SearchCustomers',
                type: 'GET',
                data: { query: query },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function(customers) {
                    dropdown.empty();

                    // Yeni müşteri ekle seçeneği (her zaman en üstte)
                    dropdown.append(`
                        <a href="#" class="dropdown-item customer-dropdown-item text-primary" data-customer-id="new">
                            <i class="fas fa-plus me-2"></i>
                            <strong>Yeni müşteri ekle: "${query}"</strong>
                        </a>
                    `);

                    if (customers && customers.length > 0) {
                        // Ayırıcı ekle
                        dropdown.append('<div class="dropdown-divider"></div>');

                        // Müşteri listesi (maksimum 5 kişi)
                        customers.slice(0, 5).forEach(customer => {
                            dropdown.append(`
                                <a href="#" class="dropdown-item customer-dropdown-item"
                                   data-customer-id="${customer.id}"
                                   data-customer-name="${customer.fullName}">
                                    <div class="d-flex justify-content-between">
                                        <span><strong>${customer.fullName}</strong></span>
                                        <small class="text-muted">${customer.phone}</small>
                                    </div>
                                    ${customer.email ? `<small class="text-muted">${customer.email}</small>` : ''}
                                </a>
                            `);
                        });
                    } else {
                        dropdown.append('<div class="dropdown-item disabled text-muted">Müşteri bulunamadı</div>');
                    }

                    dropdown.show();
                },
                error: function(xhr, status, error) {
                    console.error('Müşteri arama hatası:', error);
                    dropdown.html('<div class="dropdown-item disabled text-danger">Arama hatası oluştu</div>').show();
                }
            });
        }

        // Düzenleme modu için müşteri bilgisini yükle
        function loadExistingCustomerInfo() {
            const customerId = $('#selectedCustomerId').val();
            if (customerId && customerId !== '00000000-0000-0000-0000-000000000000') {
                // AJAX ile müşteri bilgisini al
                $.ajax({
                    url: '/Reservations/CreateEditModal?handler=CustomerInfo',
                    type: 'GET',
                    data: { customerId: customerId },
                    headers: {
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    success: function(customer) {
                        if (customer) {
                            $('#customerSearch').val(customer.fullName);
                            selectedCustomer = {
                                id: customer.id,
                                fullName: customer.fullName
                            };
                        }
                    },
                    error: function() {
                        console.error('Müşteri bilgisi yüklenemedi');
                    }
                });
            }
        }

        // Hizmet satırı ekle
        function addServiceRow() {
            const template = document.getElementById('serviceRowTemplate');
            if (!template) {
                console.error('Service row template not found!');
                return;
            }

            const clone = template.content.cloneNode(true);
            const row = $(clone.querySelector('.service-row'));

            // Unique index ata
            const currentIndex = serviceRowIndex++;
            row.attr('data-index', currentIndex);

            // Hidden input'ları ekle
            row.append(`
                <input type="hidden" name="Reservation.ReservationDetails[${currentIndex}].ServiceId" class="detail-service-id" />
                <input type="hidden" name="Reservation.ReservationDetails[${currentIndex}].EmployeeId" class="detail-employee-id" />
                <input type="hidden" name="Reservation.ReservationDetails[${currentIndex}].StartTime" class="detail-start-time" />
                <input type="hidden" name="Reservation.ReservationDetails[${currentIndex}].CustomPrice" class="detail-custom-price" />
                <input type="hidden" name="Reservation.ReservationDetails[${currentIndex}].Note" class="detail-note" />
            `);

            // Event'leri bağla
            bindServiceRowEvents(row);

            $('#servicesContainer').append(row);
            calculateTotalPrice();
        }

        // Hizmet satırı eventlerini bağla
        function bindServiceRowEvents(row) {
            // Hizmet değişikliği
            row.find('.service-select').on('change', function () {
                onServiceChange($(this));
            });

            // Çalışan değişikliği
            row.find('.employee-select').on('change', function () {
                onEmployeeChange($(this));
            });

            // Saat değişikliği - hidden input'ı güncelle
            row.find('.time-select').on('change', function() {
                const startTime = $(this).val();
                row.find('.detail-start-time').val(startTime);
            });

            // Fiyat değişikliği - hidden input'ı güncelle ve toplam hesapla
            row.find('.service-price').on('input change', function() {
                const price = $(this).val();
                row.find('.detail-custom-price').val(price.toString().replace(',', '.'));
                // Her fiyat değişikliğinde toplam hesapla
                calculateTotalPrice();
            });

            // Not değişikliği - hidden input'ı güncelle
            row.find('.service-note').on('input', function() {
                const note = $(this).val();
                row.find('.detail-note').val(note);
            });

            // Silme butonu
            row.find('.remove-service-btn').on('click', function () {
                if ($('#servicesContainer .service-row').length > 1) {
                    row.remove();
                    // Index'leri yeniden düzenle
                    reindexReservationDetails();
                    calculateTotalPrice();
                } else {
                    abp.notify.warn('En az bir hizmet olmalıdır!');
                }
            });
        }

        // Index'leri yeniden düzenle
        function reindexReservationDetails() {
            $('#servicesContainer .service-row').each(function(index) {
                const row = $(this);
                row.attr('data-index', index);

                // Hidden input'ların name'lerini güncelle
                row.find('.detail-service-id').attr('name', `Reservation.ReservationDetails[${index}].ServiceId`);
                row.find('.detail-employee-id').attr('name', `Reservation.ReservationDetails[${index}].EmployeeId`);
                row.find('.detail-start-time').attr('name', `Reservation.ReservationDetails[${index}].StartTime`);
                row.find('.detail-custom-price').attr('name', `Reservation.ReservationDetails[${index}].CustomPrice`);
                row.find('.detail-note').attr('name', `Reservation.ReservationDetails[${index}].Note`);
            });
        }

        // Hizmet değiştiğinde
        function onServiceChange(selectElement) {
            const serviceId = selectElement.val();
            const row = selectElement.closest('.service-row');
            const employeeSelect = row.find('.employee-select');

            // Hidden input'ı güncelle
            row.find('.detail-service-id').val(serviceId);

            if (!serviceId) {
                employeeSelect.html('<option value="">Önce Hizmet Seçin</option>');
                row.find('.time-select').html('<option value="">Önce Çalışan Seçin</option>');
                row.find('.service-price').val('');

                // Hidden input'ları temizle
                row.find('.detail-employee-id').val('');
                row.find('.detail-start-time').val('');
                row.find('.detail-custom-price').val('');

                calculateTotalPrice();
                return;
            }

            // Loading state
            employeeSelect.html('<option value="">Yükleniyor...</option>');

            // Hizmeti verebilen çalışanları getir
            $.ajax({
                url: '/Reservations/CreateEditModal?handler=EmployeesByService',
                type: 'GET',
                data: { serviceId: serviceId },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (employees) {
                    employeeSelect.html('<option value="">Çalışan Seçin</option>');
                    if (employees && employees.length > 0) {
                        employees.forEach(emp => {
                            employeeSelect.append(`<option value="${emp.id}">${emp.fullName}</option>`);
                        });
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Çalışan listesi yüklenemedi:', error);
                    employeeSelect.html('<option value="">Hata oluştu</option>');
                    abp.notify.error('Çalışan listesi yüklenemedi!');
                }
            });

            // Servis fiyatını API'den al
            $.ajax({
                url: '/Reservations/CreateEditModal?handler=ServicePrice',
                type: 'GET',
                data: { serviceId: serviceId },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response && response.price !== undefined) {
                        const price = parseFloat(response.price);
                        if (!isNaN(price)) {
                            row.find('.service-price').val(price.toFixed(2));
                            row.find('.detail-custom-price').val(price.toString().replace(',', '.'));

                            // Fiyat geldiği anda toplam hesapla
                            calculateTotalPrice();
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Servis fiyatı alınamadı:', error);
                    // Hata durumunda fiyatı sıfırla
                    row.find('.service-price').val('0.00');
                    row.find('.detail-custom-price').val('0.00');
                    calculateTotalPrice();
                }
            });
        }

        // Çalışan değiştiğinde
        function onEmployeeChange(selectElement) {
            const employeeId = selectElement.val();
            const row = selectElement.closest('.service-row');
            const serviceId = row.find('.service-select').val();
            const date = $('#reservationDate').val();
            const timeSelect = row.find('.time-select');

            // Hidden input'ı güncelle
            row.find('.detail-employee-id').val(employeeId);

            if (!employeeId || !serviceId || !date) {
                timeSelect.html('<option value="">Önce tüm alanları doldurun</option>');
                row.find('.detail-start-time').val('');
                return;
            }

            // Loading state
            timeSelect.html('<option value="">Müsait saatler yükleniyor...</option>');

            // Müsait saatleri getir
            $.ajax({
                url: '/Reservations/CreateEditModal?handler=AvailableSlots',
                type: 'GET',
                data: {
                    employeeId: employeeId,
                    serviceId: serviceId,
                    date: date
                },
                headers: {
                    'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    timeSelect.html('<option value="">Saat Seçin</option>');
                    const slots = response.availableSlots && response.availableSlots.availableSlots;

                    if (slots && slots.length > 0) {
                        slots.forEach(slot => {
                            if (slot.isAvailable) {
                                timeSelect.append(`<option value="${slot.startTime}">${slot.display}</option>`);
                            }
                        });
                    } else {
                        timeSelect.html('<option value="">Müsait saat yok</option>');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Müsait saatler yüklenemedi:', error);
                    timeSelect.html('<option value="">Hata oluştu</option>');
                    abp.notify.error('Müsait saatler yüklenemedi!');
                }
            });
        }

        // Toplam fiyatı hesapla - Dinamik hesaplama
        function calculateTotalPrice() {
            let total = 0;

            // Tüm hizmet fiyatlarını topla
            $('.service-price').each(function () {
                const price = parseFloat($(this).val()) || 0;
                total += price;
            });

            // İndirim ve ekstra ücretleri al
            const discount = parseFloat($('#discountAmount').val()) || 0;
            const extra = parseFloat($('#extraAmount').val()) || 0;

            // Toplam hesapla (negatif olamaz)
            total = Math.max(0, total - discount + extra);

            // Toplam tutarı güncelle - Türk Lirası formatında
            $('#totalAmount').val('₺' + total.toFixed(2));

            // Debug için konsola yazdır
            console.log('Fiyat hesaplaması:', {
                servicesTotali: $('.service-price').toArray().reduce((sum, el) => sum + (parseFloat($(el).val()) || 0), 0),
                indirim: discount,
                ekstra: extra,
                toplamTutar: total
            });
        }

        function updateAvailableSlots() {
            $('#servicesContainer .service-row').each(function () {
                const row = $(this);
                const employeeSelect = row.find('.employee-select');
                if (employeeSelect.val()) {
                    onEmployeeChange(employeeSelect);
                }
            });
        }

        // Modal kapatıldığında temizlik yap
        $('#createEditModal').on('hidden.bs.modal', function () {
            $('#servicesContainer').empty();
            serviceRowIndex = 0;
            selectedCustomer = null;
            $('#customerSearch').val('');
            $('#selectedCustomerId').val('');
            $('#customerDropdown').hide();
        });

        // Modal açıldığında yeniden initialize et
        $('#createEditModal').on('shown.bs.modal', function () {
            initializeModal();
            loadExistingCustomerInfo();
        });
    });
</script>

<form asp-page="/Reservations/CreateEditModal" id="reservationForm" data-check-form-on-close="false">
    <abp-modal id="createEditModal" size="ExtraLarge">
        <abp-modal-header title="@(Model.Reservation?.Id == Guid.Empty ? "Yeni Rezervasyon" : "Rezervasyon Düzenle")"></abp-modal-header>
        <abp-modal-body>
            <div asp-validation-summary="All" class="text-danger mb-3"></div>

            <input asp-for="Reservation.Id" type="hidden" />

            <!-- Müşteri Seçimi -->
            <div class="row mb-3">
                <div class="col-md-8">
                    <label class="form-label">Müşteri *</label>
                    <div class="position-relative">
                        <input type="text"
                               id="customerSearch"
                               class="form-control"
                               placeholder="Müşteri adı yazın..."
                               autocomplete="off" />
                        <input type="hidden"
                               asp-for="Reservation.CustomerId"
                               id="selectedCustomerId" />

                        <!-- Dropdown sonuçlar -->
                        <div id="customerDropdown"
                             class="dropdown-menu w-100"
                             style="display: none; max-height: 300px; overflow-y: auto;">
                            <!-- Dinamik olarak doldurulacak -->
                        </div>
                    </div>
                    <span asp-validation-for="Reservation.CustomerId" class="text-danger"></span>

                </div>
                <div class="col-md-4">
                    <label class="form-label" asp-for="Reservation.ReservationDate">Tarih *</label>
                    <input type="date" id="reservationDate" asp-for="Reservation.ReservationDate" class="form-control" required />
                    <span asp-validation-for="Reservation.ReservationDate" class="text-danger"></span>
                </div>
            </div>

            <!-- Hizmet Detayları -->
            <div class="card mb-3">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="mb-0">Hizmetler</h6>
                    <button type="button" class="btn btn-sm btn-primary" id="addServiceBtn">
                        <i class="fas fa-plus"></i> Hizmet Ekle
                    </button>
                </div>
                <div class="card-body">
                    <div id="servicesContainer">
                        <!-- Dinamik olarak hizmetler eklenecek -->
                    </div>
                </div>
            </div>

            <!-- Fiyat Bilgileri -->
            <div class="row mb-3">
                <div class="col-md-4">
                    <label class="form-label" asp-for="Reservation.DiscountAmount">İndirim (₺)</label>
                    <input type="number" id="discountAmount" asp-for="Reservation.DiscountAmount" class="form-control" min="0" step="10" />
                    <span asp-validation-for="Reservation.DiscountAmount" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <label class="form-label" asp-for="Reservation.ExtraAmount">Ekstra Ücret (₺)</label>
                    <input type="number" id="extraAmount" asp-for="Reservation.ExtraAmount" class="form-control" min="0" step="10" />
                    <span asp-validation-for="Reservation.ExtraAmount" class="text-danger"></span>
                </div>
                <div class="col-md-4">
                    <label class="form-label">Toplam Tutar</label>
                    <input type="text" id="totalAmount" class="form-control" readonly />
                </div>
            </div>

            <!-- Not -->
            <div class="mb-3">
                <label class="form-label" asp-for="Reservation.Note">Not</label>
                <textarea asp-for="Reservation.Note" class="form-control" rows="2"></textarea>
                <span asp-validation-for="Reservation.Note" class="text-danger"></span>
            </div>

            <!-- Walk-in Checkbox -->
            <div class="form-check">
                <input type="checkbox" asp-for="Reservation.IsWalkIn" class="form-check-input" />
                <label class="form-check-label" asp-for="Reservation.IsWalkIn">
                    Adisyon (Walk-in Müşteri)
                </label>
            </div>

        </abp-modal-body>
        <abp-modal-footer buttons="@(AbpModalButtons.Cancel|AbpModalButtons.Save)"></abp-modal-footer>
    </abp-modal>
</form>

<!-- Hizmet Satırı Template -->
<template id="serviceRowTemplate">
    <div class="service-row mb-3 p-3 border rounded">
        <div class="row">
            <div class="col-md-4">
                <label class="form-label">Hizmet</label>
                <select class="form-select service-select" required>
                    <option value="">Hizmet Seçin</option>
                    @foreach (var service in Model.Services)
                    {
                        <option value="@service.Value">@service.Text</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Çalışan</label>
                <select class="form-select employee-select" required>
                    <option value="">Önce Hizmet Seçin</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Saat</label>
                <select class="form-select time-select" required>
                    <option value="">Önce Çalışan Seçin</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label">Fiyat (₺)</label>
                <input type="number" class="form-control service-price" min="0" step="0.01" />
            </div>
            <div class="col-md-1 d-flex align-items-end">
                <button type="button" class="btn btn-sm btn-danger remove-service-btn">
                    <i class="fas fa-trash"></i>
                </button>
            </div>
        </div>
        <div class="row mt-2">
            <div class="col-12">
                <input type="text" class="form-control service-note" placeholder="Hizmet notu (opsiyonel)" />
            </div>
        </div>
    </div>
</template>